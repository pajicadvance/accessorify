plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.171'
}

version = mod_version + "+" + stonecutter.current.version
group = mod_group_id

repositories {
    mavenLocal()
    maven { url 'https://maven.wispforest.io/releases' }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://maven.shedaniel.me/' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

base {
    archivesName = mod_id
}

subsystems {
    parchment {
        minecraftVersion = property("neogradle.subsystems.parchment.minecraftVersion")
        mappingsVersion = property("neogradle.subsystems.parchment.mappingsVersion")
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

jarJar.enable()

dependencies {
    implementation "net.neoforged:neoforge:${property("neo_version")}"
    implementation "com.moulberry:mixinconstraints:${project.mixinconstraints_version}"
    jarJar(group: 'com.moulberry', name: 'mixinconstraints', version: project.mixinconstraints_version)
    implementation "io.wispforest:accessories-neoforge:${property("accessories_version")}"

    compileOnly "maven.modrinth:owo-lib:${property("owo_version")}"
    compileOnly "maven.modrinth:serene-seasons:${property("sereneseasons_version")}"
    compileOnly "maven.modrinth:raised:${property("raised_version")}"
    implementation "maven.modrinth:notes:${property("notes_version")}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
