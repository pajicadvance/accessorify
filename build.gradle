plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version + "+" + stonecutter.current.version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    mavenCentral()
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.wispforest.io/releases/" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/releases/'
    }
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/snapshots/' // Porting Lib Hotfixes
    }
    maven { url "https://mvn.devos.one/snapshots/" } // Porting Lib Betas
    maven {
        url "https://jitpack.io/" // Fabric ASM
        content {
            excludeGroup "io.github.fabricators_of_create"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.project}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${property("parchment_version")}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
    include(implementation("com.moulberry:mixinconstraints:${project.mixinconstraints_version}"))
    modImplementation("com.terraformersmc:modmenu:${property("modmenu_version")}")
    annotationProcessor modImplementation("io.wispforest:owo-lib:${property("owo_version")}")
    modImplementation "io.wispforest:accessories-fabric:${property("accessories_version")}"

    modCompileOnly "maven.modrinth:serene-seasons:${property("sereneseasons_version")}"
    modCompileOnly "maven.modrinth:raised:${property("raised_version")}"

    modImplementation "maven.modrinth:notes:${property("notes_version")}"
    modCompileOnly("vectorwing:FarmersDelight:${property("fdrf_version")}") {
        exclude(group: "net.fabricmc")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft", stonecutter.current.version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft": stonecutter.current.version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
    def java = stonecutter.eval(stonecutter.current.version, ">=1.20.5")
            ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    targetCompatibility = java
    sourceCompatibility = java
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}